#ArcView APR file parser for Yapps
#http://theory.stanford.edu/~amitp/yapps/yapps2/manual/yapps2.html

#Helper for generate data structure for an entry like:
#(AVDict.4655
#        InternalName:   "Hydrologic Modeling v1.1 (sample)"
#        Key:    4656
#        Key:    4657
#        Value:  2688
#        Value:  4658
#)
#
# -> {'tag': 'AVDict', 'id': '4655', 'properties': {'InternalName': 'Hydrologic Modeling v1.1 (sample)', 'Value': ['2688', '4658'], 'Key': ['4656', '4657']}}

def add_property(properties, name, value):
    if properties.has_key(name):
        val = properties[name]
        if hasattr(val, "append"):
            val.append(value)
        else:
            properties[name] = [val, value]
    else:
        properties[name] = value


# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class AprParserScanner(runtime.Scanner):
    patterns = [
        ('\'"\'', re.compile('"')),
        ("'\\)'", re.compile('\\)')),
        ('":"', re.compile(':')),
        ('"\\."', re.compile('\\.')),
        ("'\\('", re.compile('\\(')),
        ('"$"', re.compile('$')),
        ('"/"', re.compile('/')),
        ('[ \t]+', re.compile('[ \t]+')),
        ('EOL', re.compile('\r?\n')),
        ('INT', re.compile('[0-9]+')),
        ('NUM', re.compile('[-0-9.xa-fA-F]+')),
        ('NAME', re.compile('[a-zA-Z1-9]+')),
        ('STR', re.compile('([^\\\\"]|\\\\.)*')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'[ \t]+':None,},str,*args,**kw)

class AprParser(runtime.Parser):
    Context = runtime.Context
    def apr(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'apr', [])
        self._scan('"/"', context=_context)
        NUM = self._scan('NUM', context=_context)
        EOL = self._scan('EOL', context=_context)
        entries = [ NUM ]
        while self._peek('"$"', "'\\('", context=_context) == "'\\('":
            entry = self.entry(_context)
            while 1:
                EOL = self._scan('EOL', context=_context)
                if self._peek('EOL', '"$"', "'\\('", context=_context) != 'EOL': break
            entries.append(entry)
        self._scan('"$"', context=_context)
        return entries

    def entry(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'entry', [])
        self._scan("'\\('", context=_context)
        NAME = self._scan('NAME', context=_context)
        self._scan('"\\."', context=_context)
        INT = self._scan('INT', context=_context)
        EOL = self._scan('EOL', context=_context)
        e = {'tag': NAME, 'id': int(INT), 'properties': {} }
        while self._peek('EOL', 'NAME', "'\\)'", context=_context) == 'NAME':
            NAME = self._scan('NAME', context=_context)
            self._scan('":"', context=_context)
            value = self.value(_context)
            EOL = self._scan('EOL', context=_context)
            add_property(e['properties'], NAME, value)
        while self._peek("'\\)'", 'EOL', context=_context) == 'EOL':
            EOL = self._scan('EOL', context=_context)
        self._scan("'\\)'", context=_context)
        return e

    def value(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'value', [])
        _token = self._peek('\'"\'', 'NUM', context=_context)
        if _token == '\'"\'':
            self._scan('\'"\'', context=_context)
            STR = self._scan('STR', context=_context)
            self._scan('\'"\'', context=_context)
            return STR
        else: # == 'NUM'
            nums = []
            while 1:
                NUM = self._scan('NUM', context=_context)
                nums.append(NUM)
                if self._peek('NUM', 'EOL', context=_context) != 'NUM': break
            return nums if len(nums)>1 else nums[0]


def parse(rule, text):
    P = AprParser(AprParserScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
